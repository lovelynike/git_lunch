
https://codingapple.com/course/git-and-github/
코딩애플 사이트에 있는 git 사용법 요약(?)

[전체 요약]----------------------------------------------------------------------------------------

(설치) visual studio code 검색해서 설치 -> * git --version 입력 후 버전이 아무거나 뜨면 git 설치성공
(유저 이름셋팅) * git config --global user.email "홍길동@naver.com"
(유저 이름셋팅) * git config --global user.name "홍길동"
(작업폴더에서 git을 이용하고 싶으면) 
	거기서 터미널을 열어서 * git init 부터 입력
	* git add 파일명 >> #staging area 로 이동  
	* git commit -m '아무메세지' >> #repository 로 이동 
	* git status >> #상태창 
	* git log --all --oneline
	* git log --all --oneline --graph
	
(branch 만들기)

	브랜치 생성은 * git branch 브랜치명
	브랜치 이동은 * git switch 브랜치명 
	브랜치 합치기는 main/master 브랜치로 이동한 뒤에 * git merge 브랜치명
	브랜치마다 commit 내역을 그래프로 보고싶으면 * git log --graph --oneline --all
	브랜치 합칠 때 #conflict가 발생하면 파일열어서 수정하고 git add, git commit 하기 
		
(브랜치를 삭제하려면)
		
	* git branch -d 브랜치이름 (병합이 완료된 브랜치 삭제시엔 -d)
	* git branch -D 브랜치이름 (병합하지 않은 브랜치 삭제시엔 -D 이거 해야함)			 	
			
(rebase and merge 하고 싶으면)		

	* git switch 새로운브랜치
	* git rebase main

	* git switch main
	* git merge 새로운브랜치	차례로 입력하면 rebase 끝
    
(파일 하나를 되돌리려면 git restore)(= 파일 복구하는 법)

    * git restore --source 커밋아이디 파일명 (git restore --source d03ee04 .\git_revert.java)
        이러면 입력한 파일이 특정 커밋아이디 시점으로 복구
        		
(로컬저장소 -> 원격저장소 이렇게 업로드하고 싶으면 작업폴더에서) 
	
	* git push -u 원격저장소주소 main
	
	* git push 원격저장소주소 로컬브랜치명 하면 특정 로컬저장소 브랜치 -> 원격저장소
	* git push 원격저장소주소 하면 모든 로컬저장소 브랜치 -> 원격저장소 입니다.
		 
		(참고) 
		-u 옵션은 방금 입력한 주소 기억해두라는 뜻입니다. 다음부터는 주소를 길게 입력안하고 git push만 입력해도 잘됩니다.  
		원격 repository 주소는 이렇게 https:// 부터 시작해서 .git으로 끝납니다.
				
		(참고)
		github 사이트에서도 파일 수정삭제, commit 이런 것들 자유롭게 가능 / github 원격저장소는 비공개로 돌릴 수도 있음	
		원격저장소주소 길게 입력하는게 귀찮으면 * git remote add 변수명(=origin 같은거) 저장소주소("https://어쩌구") 하면 		
		* git push -u origin main 이렇게 짧고 귀엽게 쓸 수 있음

		(참고) 
		-u 붙여서 1번 했었으면 나중엔 git push 까지만 입력해도 알아서 됨
		 
	* git remote -v 입력해보십쇼 변수목록 나옴 
	
		(참고)
		- 저장소에 올리지 않는 파일들은 .gitignore
		
(원격저장소에 있던거 그대로 내려받기)		
	* git clone https://원격저장소주소				

(현재 원격저장소 내용 가져오기)		
	
	* git pull 원격저장소주소	

	(참고) git pull 명령어는 git fetch + git merge 축약어임 

		git pull 입력하면 자동으로 git fetch + git merge를 해줍니다. 
		git fetch는 원격저장소에 있는 commit 중에 로컬에 없는 신규 commit을 가져오라는 뜻이고
		git merge는 그걸 merge 하라는 뜻
		
	(결론)
	변동사항이 생겼다면 git pull 하고 나서 git push 하면 됩니다.
	협업시 git push 하기 전에 뭐라그러면 git pull 존나게 하면 됨 
		
(Pull request 하기)(= merge request )		 
		내 브랜치좀 merge 해달라는 요청을 할 수 있고
		팀원끼리 merge전에 코드검토가 가능합니다. 
		
		merge 할 때 여러가지 옵션이 있는데 택1 하면 됩니다.

		(1) create a merge commit 하면
			새로운 merge commit을 하나 생성해주는 3-way merge를 실행해줍니다. 
			- main 브랜치 조회시 합쳐진 브랜치의 commit 내역도 전부 나옴  
			- 터미널에 git log --oneline --graph 해보면 합쳐진 브랜치도 그림으로 나옴 
			- 그래서 commit 내역이 많으면 복잡하고 더러워보일 수 있습니다. 
		(2) squash and merge 하면 
			- 합쳐질 브랜치의 commit 내역을 하나로 합쳐서 main 브랜치에 신규 commit을 생성해줍니다.
			- git log --oneline --graph 해보면 합쳐진 브랜치 안나옴 
			- commit을 하나로 합쳐서 main 브랜치로 순간이동 시켜주는 행위라 사람들이 깔끔하다고 좋아합니다. 

		(3) rebase and merge 하면 
			- 합쳐질 브랜치를 main 브랜치 최신 commit으로 rebase하고나서 fast-forward merge 비슷한걸 해줍니다.
			- 결과는 squash and merge와 비슷한데 합쳐질 브랜치의 commit 내역이 전부 보존됩니다. 
			- 애도 git log --oneline --graph 해보면 합쳐진 브랜치 안나옴

		(결론)
			github 등 원격 저장소에도 브랜치만들 수 있습니다. 
			Pull request (merge)할 땐 3개 중 맘대로 하면 됩니다. 
			
		(참고)
		원격저장소의 commit 내역을 과거로 되돌리고 싶으면
		로컬에서 git reset --hard 이런거 쓰고 git push -f 하면 가능하긴 한데
		해당 브랜치를 공동작업중인 사람들이 모두 영향받기 때문에 그러지 않는게 좋습니다.
		github.com 사이트엔 revert 버튼이 있긴 한데 그거 쓰면 예전 코드로 되돌려주는 commit을 만들어주는 식으로 동작합니다. 


(git branch 깔끔하게 만들도록 도와주는 방법론)
	git flow, github flow, gitlab flow, trunk-based 등 다양한 것들이 있습니다.  	
	
	이런걸 적용하면
		1. 브랜치관리가 쉬워지고 
		2. 팀원이 아무리 많아도 개발절차가 매끄러워집니다. 
	그래서 프로젝트 리드하는 사람들이 알면 좋습니다. 


	[안정적인 운영이 필요하면 git flow ] 

	님들이 만드는 프로그램이 항상 안정적인 release를 해야한다면 (예를 들면 게임개발) git flow 전략을 쓰면 됩니다.  

	git flow 전략은 크게 5개 브랜치를 운영하는데 
		- main 브랜치
		- develop 브랜치 (개발용)
		- feature 브랜치 (develop에 기능추가용)
		- hotfix 브랜치 (main 브랜치 버그해결용)
		- 가끔 release 브랜치 (develop 브랜치를 main 브랜치에 합치기 전에 최종 테스트용)
	를 운영합니다.  

	
	그래서 이번엔 git flow를 도입해서 개발을 진행해봅시다. * 그림은 홈피에서 참고 - ( https://codingapple.com/course-status/ )
	
	1. develop 브랜치부터 생성합니다. 		

	2. 신기능개발은 feature 브랜치에서 진행
		신기능을 만들고 싶으면  
		feature/guild 브랜치 만들어서 길드기능 만들고 
		feature/friend 브랜치 만들어서 친구기능 만들고 하면 됩니다. 		
		- 완성되면 develop 브랜치에 merge 합니다.
		- 중요한 내용이 아니면 squash and merge도 괜찮습니다. 
		
	3. 신버전 출시 준비는 release 브랜치
		
		이걸 바로 main 브랜치에 합치기엔 또 불안하기 때문에
		develop -> release 브랜치 이렇게 프로젝트를 복사한 다음 출시준비를 합니다. 	
		완성된 것 같으면 main 브랜치로 merge 합니다. 그리고 그거 유저들에게 배포하면 됩니다. 
		개발은 계속 진행되어야하니 완성본은 develop 브랜치에도 merge 해줍시다. 
		
	4. hotfix 브랜치
		1.0 버전에서 갑자기 골드 무한복사 버그를 발견했습니다. 
		그런 급한 것들은 main 브랜치에서 hotfix 이런 브랜치 하나 만들어서 바로바로 버그수정
		- 수정이 완료되면 main 브랜치에 직접 merge 하면 됩니다. 
		- 당연히 develop 브랜치에도 merge 해줘야합니다. 		
		
	[Trunk-based 전략 ] 

		크게 대격변 업데이트를 안하는 안정적인 프로그램이면 굳이 많은 브랜치를 만들 필요가 없습니다. 
		그냥 main 브랜치와 기능추가용 feature 브랜치만 운영하면 됩니다. 
		이게 trunk-based 전략입니다.
		github flow도 이거랑 비슷
		
	1. 기능추가, 버그픽스가 필요하면 main 브랜치에서 새로운 브랜치를 하나 만들어서 코드짭니다.
		브랜치마다 작명 잘하는게 중요합니다.  

	2. 기능이 완성되었으면 main 브랜치에 합칩니다.
		이제 브랜치 쓸데없으니 삭제합니다. 

	3. main 브랜치에 있는 코드를 필요할 때 마다 유저들에게 배포합니다. 

		- trunk-based 개발의 장점은 코드를 한 브랜치에서만 관리하기 때문에 편리합니다. 
		- 크게 개발해서 한 번에 merge 하는 것 보다 작은 단위로 merge 하는 것이 더 안전합니다. 
		- 하지만 main 브랜치에 있는 코드가 뻑이나면 큰일나기 때문에 테스트나 코드리뷰를 자주해야합니다.
		그래서 테스트를 자주하고 자동화해놓는 곳들이 제대로 사용가능합니다. 
		
	(결론)
		이미 어느정도 개발이 진척이 되었거나 프로 코딩전사들로 가득한 팀이면 trunk-based 이런거 쓰는게 훨씬 편리합니다.
		최근 유행한 CI/CD 이런 식으로 개발하는 곳들도 trunk-based 개발방식을 적용합니다.  
		출시된 버전의 안정성이 중요한 프로그램들, 아직 뼈대가 확실하지 않아 연구식으로 개발하는 프로그램들은 git flow가 적절할 수 있습니다. 
		
	Q. merge 할 때 어떤 방법 쓰는게 좋은가요?
		기록을 남겨야하는 중요한 브랜치를 merge할 땐 3-way merge
		기록을 남길 필요없는 쓸데없는 브랜치를 merge할 땐 squash, rebase 쓰면 됩니다. 
		

[git stash로 코드 잠깐 보관하기](= 브랜치 만들어서 쓰면 stash 안해도됨)----------------------------------------------------------------------------------		
	
	* git stash 사용해서 코드 잠깐 다른 곳에 보관하기
	