
https://codingapple.com/course/git-and-github/
코딩애플 사이트에 있는 git 사용법 요약(?)

[git 설치법 (윈도우 / 맥북)]--------------------------------------------------------------------------

	구글에 visual studio code 검색해서 설치합시다.
	* git --version 이라고 입력해봅시다. 
	버전이 아무거나 뜨면 git 설치성공입니다.
	안뜨면 에디터나 컴퓨터 재시작해봅시다. 

	[git 유저 이름셋팅]
	git config --global user.email "홍길동@naver.com"
	git config --global user.name "홍길동"
	컴퓨터에서 git을 처음 사용한다면 위 코드를 터미널에 차례로 입력하면 되는데 
	누가 지금 git을 쓰고있는지 구분하기 위한 간단한 아이디 등록같은겁니다.
	
[git add, commit으로 파일 기록해놓을 수 있음]------------------------------------------------------------
	
	일단 작업폴더에서 git을 이용하고 싶으면
	거기서 터미널을 열어서 * git init 부터 입력하고 시작하면 됩니다. 
	이제 git이 여러분이 파일생성하는거, 코드작성하는걸 추적하기 시작합니다. 
	
	* git add 파일명 
	* git commit -m '아무메세지'
	차례로 터미널에 입력하면 됩니다. 
	이러면 방금 파일의 내용을 몰래 어딘가에 기록해줍니다. 
	이럼 뭐가좋냐고요? 
	이제 한참 뒤에도 이 파일상태 그대로 되돌리거나 그럴 수 있고
	나중에 파일변경 히스토리가 궁금하면 열람할 수도 있습니다.

	[staging area & repository ]
	
	1. staging area는 commit을 하기 전에 commit할 파일들을 골라놓는 곳입니다.
		그리고 staging area에 파일넣는 행위를 staging이라고 합니다. 
		git add 명령어로 staging 할 수 있습니다. 

	2. repository는 commit된 파일의 버전들을 모아놓는 곳입니다.
		repository의 실체를 구경하고 싶으면 작업폴더안에 숨겨져 있는 .git 폴더 열어보면 됩니다. 
		아무튼 staging area & repository 2개는 자주 쓰는 용어니까 잘 외워둡시다.
		
	작업폴더의 모든 파일을 전부 스테이징하고 싶으면 * git add . 하면 됩니다.
	
	* git status
	지금 변경된 파일, 스테이징된 파일 이런걸 쭉 알려줍니다. 
	지금 뭐 하는지 까먹었을 때도 자주 입력하게 됩니다. 
	
	* git log --all --oneline
	* git log --all --oneline --graph
	commit 기록을 한 눈에 파악하고 싶으면 git log 명령어 입력하면 됩니다. 
	--graph 옵션을 넣으면 그래프로 그려줍니다. 지금은 보잘것 없음 
	다만 입력 후엔 Vim 에디터가 켜져서 j, k 키로 위아래 스크롤이 가능하고 q 키로 종료할 수 있습니다. 

[git 에서 branch 만들기](=복사본 만들어서 테스트)------------------------------------------------------------
	
	* git branch 브랜치이름 
	이러면 프로젝트 사본이 하나 생성됩니다.
	
	* git switch 브랜치이름 
	예를 들어 방금 만든 coupon 브랜치로 이동하고 싶으면 git switch coupon 하면 됩니다.
	- 어떤 브랜치에 와있는지 까먹었으면 git status 입력할 수 있습니다. 
	
	* git switch main
	* git merge 브랜치명 
	
		merge 하고 싶으면
		1. main/master 브랜치로 다시 이동하고
		2. git merge 브랜치명 입력하면 합쳐집니다.
		예를 들어 git merge coupon 이러면 coupon 브랜치의 코드들이 main/master 브랜치에 합쳐집니다.
	
	* conflict	
		master 브랜치와 coupon 브랜치에서 같은 파일, 같은 줄을 수정했을 경우
		merge conflict 가 발생합니다.
		
		 둘 중 어떤 코드를 적용할지 고르면 되는데 
		<<<< / >>>> / ==== 이런 쓸데없는 것들은 다 지우고 원하는 코드만 남기면 됩니다.
		(VSCode 에디터의 경우 Accept Incoming Change 어쩌구 버튼들을 제공해주는데 그거 누르면 편리합니다)
		어떤 코드를 남길지 결정했으면 
		git add 파일명
		git commit -m '메세지'
		입력하면 새로운 commit 을 생성해주며 merge conflict 해결 + 브랜치 합치기 완료입니다. 
		
	* 오늘 요약정리 : 

		브랜치 생성은 git branch 브랜치명
		브랜치 이동은 git switch 브랜치명 
		브랜치 합치기는 main/master 브랜치로 이동한 뒤에 git merge 브랜치명
		브랜치마다 commit 내역을 그래프로 보고싶으면 git log --graph --oneline --all
		브랜치 합칠 때 conflict가 발생하면 파일열어서 수정하고 git add, git commit 하기 


[다양한 merge 방법 (3-way, fast-forward, squash, rebase)]------------------------------------------------

	* 3-way merge  
		브랜치에 각각 신규 commit이 1회 이상 있는 경우 
		merge 명령을 내리면 두 브랜치의 코드를 합쳐서 새로운 commit을 자동으로 생성해주는데
		이걸 3-way merge 라고 부릅니다.
		이게 merge의 기본 동작방식입니다. 

	* fast-forward merge
		가끔은 새로운 브랜치에만 commit 이 있고 기준이 되는 브랜치에는 신규 commit 이 없는 경우가 있습니다.
		이 경우 merge 하게 되면 "fast-forward merge 되었습니다" 라고 알려줍니다.
		fast-forward merge가 뭐냐면 
		딱히 합칠게 없어서 그냥 신규브랜치 보고
		"지금부터 니 이름은 main 브랜치여" 하는 것입니다. 
		
	(브랜치를 삭제하려면)
		3-way,  fast-forward 아무렇게나 merge 해도
		브랜치를 merge 하고 나면 브랜치가 자동으로 삭제되진 않습니다. 

		* git branch -d 브랜치이름
		* git branch -D 브랜치이름
			둘 중 하나 사용하면 이제 필요없는 브랜치를 삭제할 수 있습니다. 
			병합이 완료된 브랜치 삭제시엔 -d 이것만 해도 되는데
			병합하지 않은 브랜치 삭제시엔 -D 이거 해야함 	
			
	* rebase and merge 

		브랜치를 rebase 하고 나서 merge 하는 짓거리도 가능합니다. 
		일단 rebase가 뭐냐면 	
		rebase는 브랜치의 시작점을 다른 commit으로 옮겨주는 행위입니다. 

		1. rebase를 이용해서 신규브랜치의 시작점을 main 브랜치 최근 commit으로 옮긴 다음 
		2. fast-forward merge하는 것입니다. 

		이런 식으로도 브랜치 합치기가 가능하겠군요. 
		왜 이따구로 하냐고요?

		1. 3-way merge 말고 강제로 fast-forward 하고 싶을 때 
		2. 브랜치 그딴거 필요없이도 코드 잘짜는 고수같은 느낌을 주고 싶을 때
		그러고 싶으면 일반 3-way merge 대신 rebase & merge 해도 됩니다.

		그래서 실제로 rebase and merge 하고 싶으면 
		1. 새로운 브랜치로 먼저 이동해서
		2. git rebase main 하면 됩니다. 
		3. 그럼 브랜치가 main 브랜치 끝으로 이동하는데 그걸 fast-forward merge 하면 됩니다. 

		* git switch 새로운브랜치
		* git rebase main

		* git switch main
		* git merge 새로운브랜치
		차례로 입력하면 rebase 끝입니다. 

		rebase & merge를 한 줄로 쉽게 비유하자면 강제 fast-forward merge입니다. 

	* squash and merge 하는 경우도 있음
		왜냐면 
		(1) 3-way merge 된 것들은 매우 복잡해보임 
		(2) main 브랜치 git log 출력해보면 3-way merge된 브랜치들의 commit 내역도 다 같이 출력되어서 더러워짐 
		이런 현상이 있습니다.  

		그러기 싫으면 rebase 아니면 squash and merge 하면 됩니다. 
		그거 쓰면 새로운 브랜치에 있던 commit 들을 연결해주는게 아니라 똑 떼와서 main 브랜치에 붙여주기 때문에
		1번과 2번걱정을 안해도 됩니다. 

		rebase는 아까 배웠고
		squash and merge 이거 하면 어떻게 되냐면
		3-way merge처럼 선으로 이어주지 않고
		새 브랜치에 있던 코드변경사항들이 main 브랜치로 텔레포트합니다. 
		
	* 어떻게 merge 할 지 판단하기 힘들어요
		초보땐 squash 할지 말지 고민하지 말고 대충하십시오.
		나중에 코딩노예로 취직하면 중요한 브랜치마다 merge 방법 가이드라인이 있습니다. 

[코드짜다가 실수했다 되돌아가자 (git revert, reset, restore)]-------------------------------------------------

    git은 버전관리 프로그램이기때문에 언제든지 이전 commit으로 되돌아가거나
    문제가 되는 commit 내역을 취소하거나 그럴 수 있습니다.

    git restore / git revert / git reset 명령어 써서 파일 복구하는 법을 알아봅시다. 
    각각 파일하나 복구, commit 복구, 시간되돌리기가 가능합니다. 

    [파일 하나를 되돌리려면 git restore]

        git restore 파일명
        이러면 최근 commit 된 상태로 현재 파일의 수정내역을 되돌릴 수 있습니다.  

     *  git restore --source 커밋아이디 파일명
        (git restore --source d03ee04 .\git_revert.java)
        이러면 입력한 파일이 특정 커밋아이디 시점으로 복구됩니다.  

        git restore --staged 파일명
        이건 복구랑 상관없지만 이러면 특정 파일을 staging 취소할 수 있습니다. 
		
[Github 사용법 1. 내 코드 올릴 땐 git push]-----------------------------------------------------------------

	git push, pull 어쩌구 배우기 전에
	원격 repository 개념과 왜 사용하는지부터 알고 지나갑시다. 
	그래야 자신있게 git push 이런거 사용가능 	
	

	* github 가입하고 repository (저장소) 하나 만들기
	* 일단 작업폴더에서 git으로 commit 몇번 해보셈
		원격저장소 왜 쓴다고 했습니까.
		내 컴퓨터에서 만들어둔 저장소를 백업해둘 수 있다고 해서 쓴다고 하지 않았습니까.
		그래서 내 컴퓨터에서 만든 로컬저장소를 원격저장소로 백업해봅시다.
		일단 새로운 작업폴더에다가 git init 해서 저장소 하나 만들어보십시오. 

		1. 작업폴더를 하나 만든 다음 터미널에서 열어서 git init 합니다.
		그게 로컬 리포지토리 생성 법임  

		2. github.com은 이제 기본 브랜치 이름을 master가 아니라 main으로 사용하라고 강요합니다.
		그래서 우리 로컬 작업폴더에 있는 기본 브랜치 이름도 main으로 변경해줍니다.
		터미널 열어서
		git branch -M main
		입력하면 기본 브랜치 이름이 변경됩니다. 
		안해도 될 수 있음 

		3. 그 다음에 파일같은거 만들어서 commit 몇 번 해보십시오. 
		
	** Github에서 만든 원격 저장소에 올리기
		로컬저장소 -> 원격저장소
		이렇게 업로드하고 싶으면 작업폴더에서 
		* git push -u 원격저장소주소 main
		하면 됩니다.
		- 로컬저장소의 main 브랜치를 원격저장소에 올리라는 뜻입니다. 다른 브랜치도 올릴 수 있음 
		- github 로그인하라고 뜨면 로그인하면 됩니다. 
		- 참고로 -u 옵션은 방금 입력한 주소 기억해두라는 뜻입니다. 다음부터는 주소를 길게 입력안하고 git push만 입력해도 잘됩니다.  
		원격 repository 주소는 이렇게 https:// 부터 시작해서 .git으로 끝납니다.
		잘 찾아보십시오.
		
		(참고)
		github 사이트에서도 파일 수정삭제, commit 이런 것들 자유롭게 가능합니다. 
		github 원격저장소는 비공개로 돌릴 수도 있음 
	
	*원격저장소주소 길게 입력하는게 귀찮으면 
		그니까 https://github.com/codingapple1/lesson.git 이거 매번 입력하기 귀찮으면 어떻게 하냐는 겁니다. 
		그럴 땐 그 주소를 변수에 저장해서 사용할 수 있습니다. 
		변수에 저장하려면 
		터미널에 git remote add 변수명 저장소주소
		입력하면 됩니다. 
		git remote add origin https://github.com/codingapple1/lesson.git
		이렇게 입력하면 "https://어쩌구" 주소가 필요할 때 마다 origin 이라는 변수명을 쓸 수 있습니다. 
		아까쓰던 지랄맞게 길던 명령어를 git push -u origin main 이렇게 짧고 귀엽게 쓸 수 있겠군요. 

		(참고) 실은 -u는 방금 입력한 주소를 기억하라는 뜻이라
		-u 붙여서 1번 했었으면 나중엔 git push 까지만 입력해도 알아서 잘됩니다. 
		진짜로 git push만 해보셈  

		(참고) 변수목록을 살펴보고 싶으면 git remote -v 입력해보십쇼 
		
	** 원격저장소에 있던거 그대로 내려받기
		돈벌어서 맥북을 샀는데 그 컴퓨터에서 갑자기 개발을 시작하고 싶은겁니다.
		그럼 귀찮게 컴퓨터간 소스코드를 공유할 필요 없이 
		원격저장소에 있던 내용을 그대로 내려받아서 시작하면 편리합니다. 
		* git clone https://원격저장소주소
		하십쇼 
		
	* 저장소에 올리지 않는 파일들은 .gitignore
		원격저장소를 효율적으로 쓰고 싶으면 쓸데없는 파일은 commit 해서 올리지 않는게 좋습니다.
		.gitignore 파일을 하나 만들면 저장소에 올리지 않을 파일들을 쉽게 명시가능합니다.
		거기 명시한 파일들은 git add . 해도 스테이징이 되지 않아서 편리합니다.
		웹개발을 제일 많이 하니까 웹개발을 예로 들면 
		node_modules 이런 폴더, 개인정보들이 들어있는 .env 파일 이런 것들은 안올립니다. 
		(어짜피 package.json 파일만 잘 있으면 터미널에서 npm install 입력하면 자동으로 node_modules 폴더가 생성됩니다.)
		그래서 .gitignore 파일에 명시해주면 됩니다.
		작성하는 법은 필요할 때 구글찾아보십쇼 

[Github 사용법 2. 타인과 협업하기 (git clone, pull)]-----------------------------------------------------------

	"기존 소스코드가 없는데 코드어떻게 짬?" 
	당연히 코딩노예는 기존 소스코드를 다운받아서 시작할 수 있습니다.  
	다운받는 법은 github.com 가서 다운받아도 되고 

	* git clone 원격저장소주소
	새로운 작업폴더에서 이거 입력해도 됩니다. 
	그럼 원격저장소에 있던 내용을 그대로 복제해줍니다. 
	새로 폴더만들어서 진짜 그런지 테스트해봅시다. 

	 git clone 했더니 진짜로 저번 시간에 만들었던 리포지토리가 다운받아집니다. 
	참고로 필요할 땐 특정 브랜치 1개만 clone 해올 수 있습니다. 필요하면 찾아봅시다. 
	이제 팀원도 폴더 열어서 코드짜고 commit 하고 git push 하면 됩니다. 
	
	다만 그 팀원도 github 아이디가 있어야하고
	그 팀원의 아이디를 Collaborators 메뉴에 등록해놔야 협업가능합니다. 
	
	* 팀원이 commit 하려는데 문제가 생김 
		git push는 맘대로 할 수 있는게 아닙니다.
		갑자기 다른 놈이 만든 파일이 원격저장소에 생기면 git push 못합니다. 
		예를 들어 github.com 의 여러분 리포지토리로 들아가봅시다. 
		거기서 새로운 파일 하나를 만들어봅시다. 
		
	* git pull 이용하면 현재 원격저장소 내용 가져올 수 있음  
	* git pull 원격저장소주소
	이러면 원격저장소에 있던 모든 브랜치 내용을 가져와서 로컬저장소에 합치라는 뜻입니다.
	이걸 해주면 로컬이 최신상태가 되기 때문에 이제 git push가 가능합니다.

	** 결론은 변동사항이 생겼다면 git pull 하고 나서 git push 하면 됩니다.

	(참고)
		- git pull 원격저장소주소 브랜치명 입력하면 특정 브랜치만 가져올 수 있습니다. 
		- origin이라는 변수명을 등록해놨으면 당연히 사용가능
		- 예전에 -u 했었으면 git pull, git push까지만 입력해도 잘됩니다.

	(참고) git pull 명령어는 git fetch + git merge 축약어임 

		git pull 입력하면 자동으로 git fetch + git merge를 해줍니다. 
		git fetch는 원격저장소에 있는 commit 중에 로컬에 없는 신규 commit을 가져오라는 뜻이고
		git merge는 그걸 merge 하라는 뜻입니다. 
		그래서 git pull 할 때 팀원 2명이서 같은 파일을 건드리고 있을 경우 merge conflict가 날 수 있습니다.
		conflict는 branch 다룰 때 다뤄봤으니 알아서 해결하면 됩니다. 

	그래서 오늘의 결론은
	* 협업시 git push 하기 전에 뭐라그러면 git pull 존나게 하면 됩니다. 
	
[Github 사용법 3. 브랜치로 협업하기 (pull request)]-----------------------------------------------------

	신기능을 만들고 싶으면 main 브랜치에 코드짜다가 프로젝트 망치지말고
	다른 브랜치를 만들어서 거기에 개발하는 것도 안전하고 좋다고 했습니다.
	
	원격 repository (저장소) 에도 브랜치를 만들 수 있습니다.
	브랜치 생성하려면 1. github.com에서 브랜치 직접 만들어도 되고 
	2. 아니면 로컬에서 만든 브랜치를 올려도 브랜치생성이 가능합니다. 
	
	1. github 사이트에서 직접 브랜치 생성가능 
	2. 아니면 로컬 repository 에서도 브랜치생성가능
		로컬저장소에서 브랜치생성해서 원격저장소로 git push 해도 됩니다. 
		예를 들면 지금 사이트를 하나 만들고 있는데 
		사이트 방문자들 컴퓨터에 몰래 비트코인 채굴기를 심는 기능을 만든다고 칩시다. 
		
			git branch mining
			git switch mining 
			
			git add .
			git commit -m '채굴기능만들었음'
				
		그 다음에 로컬 브랜치를 원격에 올리고 싶으면
		* git push 원격저장소주소 로컬브랜치명
		이거 하면 됩니다.  
		(참고) 
		git push 원격저장소주소 로컬브랜치명 하면 특정 로컬저장소 브랜치 -> 원격저장소
		git push 원격저장소주소 하면 모든 로컬저장소 브랜치 -> 원격저장소 입니다.
		우리같은 코딩노예들은 특정 브랜치만 올리는 일이 잦습니다.
		
	* Pull request 하기 (= merge request )
		브랜치만들면 뭐합니까 그걸 main 브랜치와 합쳐야 기능이 완성되지 않겠습니까. 
		합치려면 git merge 명령어로 합치면 끝입니다. 그리고 git push 하면 끝인데
		팀끼리 일하는 경우 merge 하기 전에 토론하거나 검토하거나 그래야하는 경우가 많습니다. 
		그래서 github.com은 pull request 라는 기능이 있습니다. 
		그냥 쉬운 말로 merge request입니다. 
		
		이거 누르면 내 브랜치좀 merge 해달라는 요청을 할 수 있고
		팀원끼리 merge전에 코드검토가 가능합니다. 

		github.com 웹사이트에서 pull request를 열고 싶으면
		아무나 상단 Pull requests 메뉴에서 초록버튼 누르면 pull request 생성이 가능합니다.
		그 다음엔 어떤 브랜치를 어디에 합칠 것인지 선택하고
		하단에서 commit 내역, 변경내역 잘 보고
		초록버튼 누르면 pull request가 열립니다.
		그럼 Pull requests 메뉴에서 이렇게 확인가능한데 
		누르면 코딩노예들이 토론할 수 있는 곳도 있습니다. 거기서 코드를 리뷰하면 됩니다. 
		시니어들도 집에서 빤스바람으로 대충 읽고 Looks good to me~! 댓글 남기면 됩니다. 
		잘 된것 같아서 merge하기로 했으면
		merge 할 때 여러가지 옵션이 있는데 택1 하면 됩니다.

		(1) create a merge commit 하면
			새로운 merge commit을 하나 생성해주는 3-way merge를 실행해줍니다. 
			- main 브랜치 조회시 합쳐진 브랜치의 commit 내역도 전부 나옴  
			- 터미널에 git log --oneline --graph 해보면 합쳐진 브랜치도 그림으로 나옴 
			- 그래서 commit 내역이 많으면 복잡하고 더러워보일 수 있습니다. 
		(2) squash and merge 하면 
			- 합쳐질 브랜치의 commit 내역을 하나로 합쳐서 main 브랜치에 신규 commit을 생성해줍니다.
			- git log --oneline --graph 해보면 합쳐진 브랜치 안나옴 
			- commit을 하나로 합쳐서 main 브랜치로 순간이동 시켜주는 행위라 사람들이 깔끔하다고 좋아합니다. 

		(3) rebase and merge 하면 
			- 합쳐질 브랜치를 main 브랜치 최신 commit으로 rebase하고나서 fast-forward merge 비슷한걸 해줍니다.
			- 결과는 squash and merge와 비슷한데 합쳐질 브랜치의 commit 내역이 전부 보존됩니다. 
			- 애도 git log --oneline --graph 해보면 합쳐진 브랜치 안나옴

		* 오늘의 결론 : 
			github 등 원격 저장소에도 브랜치만들 수 있습니다. 
			Pull request (merge)할 땐 3개 중 맘대로 하면 됩니다. 
			
		(참고)
		원격저장소의 commit 내역을 과거로 되돌리고 싶으면
		로컬에서 git reset --hard 이런거 쓰고 git push -f 하면 가능하긴 한데
		해당 브랜치를 공동작업중인 사람들이 모두 영향받기 때문에 그러지 않는게 좋습니다.
		github.com 사이트엔 revert 버튼이 있긴 한데 그거 쓰면 예전 코드로 되돌려주는 commit을 만들어주는 식으로 동작합니다. 

[git flow / trunk-based 브랜치 전략]----------------------------------------------------------------------------------

	개발자 10명이서 브랜치를 대충 아무렇게나 만들면 개발과정이 매우 복잡해지고 추적도 어려워서
	git branch 깔끔하게 만들도록 도와주는 방법론같은게 있습니다. 
	git flow, github flow, gitlab flow, trunk-based 등 다양한 것들이 있습니다.  	
	
	이런걸 적용하면
		1. 브랜치관리가 쉬워지고 
		2. 팀원이 아무리 많아도 개발절차가 매끄러워집니다. 
		그래서 프로젝트 리드하는 사람들이 알면 좋습니다. 
		시키는 것만 하는 코딩노예들은 몰라도 됩니다.

	[안정적인 운영이 필요하면 git flow ] 

	님들이 만드는 프로그램이 항상 안정적인 release를 해야한다면 (예를 들면 게임개발)
	git flow 전략을 쓰면 됩니다.  

	git flow 전략은 크게 5개 브랜치를 운영하는데 
		- main 브랜치
		- develop 브랜치 (개발용)
		- feature 브랜치 (develop에 기능추가용)
		- hotfix 브랜치 (main 브랜치 버그해결용)
		- 가끔 release 브랜치 (develop 브랜치를 main 브랜치에 합치기 전에 최종 테스트용)
		를 운영합니다.  

	이론만 설명하면 노잼이라 게임개발을 예시로 들어봅시다. 
	이제부터 여러분은 "던공앤파이터M" 이라는 게임개발 팀장입니다. 
	지금까지는 대충 주먹구구식으로 협업해서 0.9버전까지 만들어놨다고 칩시다. 
	근데 1.0 버전부터는 신기능도 많고 해서 제대로 개발을 진행하고 싶은겁니다.
	그래서 이번엔 git flow를 도입해서 개발을 진행해봅시다. * 그림은 홈피에서 참고 - ( https://codingapple.com/course-status/ )
	
	1. develop 브랜치부터 생성합니다. 
		신기능 개발해서 바로 main브랜치에 합칠 것입니까?
		절대 안됩니다. 던공앤파이터M 신입 개발자들을 믿을 수 없습니다. 
		일단 실험용 프로젝트 사본을 만들고 거기다가 먼저 개발해봅시다. 
		그러기 위해 main 브랜치에 있던 기존 프로젝트를 복사한 develop 브랜치를 생성합니다. 
		이제 모든 개발은 develop 브랜치에서 진행하라고 팀원들에게 전파합니다. 

	2. 신기능개발은 feature 브랜치에서 진행
		신기능을 만들고 싶으면 develop 브랜치를 복사한 feature 브랜치에서 각각 개발합니다. 
		feature/guild 브랜치 만들어서 길드기능 만들고 
		feature/friend 브랜치 만들어서 친구기능 만들고 하면 됩니다. 
		(브랜치 작명할 때 여러 단어가 필요하면 보통 대시나 / 기호 씁니다)
		- 완성되면 develop 브랜치에 merge 합니다.
		- 중요한 내용이 아니면 squash and merge도 괜찮습니다. 
		
	3. 신버전 출시 준비는 release 브랜치
		develop에서 만든 2개 기능들이 완성된 것 같습니다.
		이걸 바로 main 브랜치에 합치기엔 또 불안하기 때문에
		develop -> release 브랜치 이렇게 프로젝트를 복사한 다음 출시준비를 합니다. 
		- 여기서 테스트나 QA같은거 진행하면 됩니다. 
		- 버그를 발견하면 알아서 임시 브랜치 만들어서 수정하거나 합니다.
		- release/1.0 이런 식으로 이쁘게 브랜치 이름을 짓는 경우가 많습니다.
		완성된 것 같으면 main 브랜치로 merge 합니다. 그리고 그거 유저들에게 배포하면 됩니다. 
		개발은 계속 진행되어야하니 완성본은 develop 브랜치에도 merge 해줍시다. 
		
	4. hotfix 브랜치
		1.0 버전에서 갑자기 골드 무한복사 버그를 발견했습니다. 
		그런 급한 것들은 main 브랜치에서 hotfix 이런 브랜치 하나 만들어서 바로바로 버그수정하면 됩니다. 
		- 수정이 완료되면 main 브랜치에 직접 merge 하면 됩니다. 
		- 당연히 develop 브랜치에도 merge 해줘야합니다. 
		이제 유저들에겐 "잡다한 버그 수정" 공지만 올리고 점검보상 쪼금 주면 됩니다. 
		게임 뿐만 아니라 웹이나 앱도 비슷하게 운영할 수 있습니다. 
		
	Q. 꼭 저거 따라해야하나요?
		물론 git flow 이런거 단점도 있습니다.
		최근 continuous delivery 이런거 한 때 유행이었는데 그런거 할 땐 적합하지 않을 수 있습니다. 
		그래서 맨날 남들이 하는거 앵무새처럼 따라할 생각하지 말고 본인 마음대로 변형해서 쓰십시오. 
		예를 들면 release 브랜치 쓰지 않고 바로 main 브랜치에 merge 해서 배포하거나 그래도 됩니다. 
		그 선택에 합당한 이유와 근거가 있으면 됩니다. 물론 책임도 져야합니다.
		근데 책임은 언제나 전가 가능
		
	[Trunk-based 전략 ] 

		님들이 만드는게 코드짠걸 바로 대중에 배포를 해도 상관없는 프로그램이면
		그리고 크게 대격변 업데이트를 안하는 안정적인 프로그램이면 
		굳이 많은 브랜치를 만들 필요가 없습니다. 
		그냥 main 브랜치와 기능추가용 feature 브랜치만 운영하면 됩니다. 
		이게 trunk-based 전략입니다.
		github flow도 이거랑 비슷합니다. 
		
	1. 기능추가, 버그픽스가 필요하면 main 브랜치에서 새로운 브랜치를 하나 만들어서 코드짭니다.
		브랜치마다 작명 잘하는게 중요합니다.  

	2. 기능이 완성되었으면 main 브랜치에 합칩니다.
		이제 브랜치 쓸데없으니 삭제합니다. 

	3. main 브랜치에 있는 코드를 필요할 때 마다 유저들에게 배포합니다. 

		- trunk-based 개발의 장점은 코드를 한 브랜치에서만 관리하기 때문에 편리합니다. 
		- 크게 개발해서 한 번에 merge 하는 것 보다 작은 단위로 merge 하는 것이 더 안전합니다. 
		- 하지만 main 브랜치에 있는 코드가 뻑이나면 큰일나기 때문에 테스트나 코드리뷰를 자주해야합니다.
		그래서 테스트를 자주하고 자동화해놓는 곳들이 제대로 사용가능합니다. 
		
	(결론)
		이미 어느정도 개발이 진척이 되었거나 프로 코딩전사들로 가득한 팀이면 trunk-based 이런거 쓰는게 훨씬 편리합니다.
		최근 유행한 CI/CD 이런 식으로 개발하는 곳들도 trunk-based 개발방식을 적용합니다.  
		출시된 버전의 안정성이 중요한 프로그램들, 아직 뼈대가 확실하지 않아 연구식으로 개발하는 프로그램들은 git flow가 적절할 수 있습니다. 
		
	Q. merge 할 때 어떤 방법 쓰는게 좋은가요?
		기록을 남겨야하는 중요한 브랜치를 merge할 땐 3-way merge
		기록을 남길 필요없는 쓸데없는 브랜치를 merge할 땐 squash, rebase 쓰면 됩니다. 
		취향일 뿐이고 알아서합시다. 

[git stash로 코드 잠깐 보관하기](= 브랜치 만들어서 쓰면 안해도됨)----------------------------------------------------------------------------------		

	방금 쓰레기같이 짜놓은 코드가 있다고 칩시다. 
	그 코드를 잠깐 치워놓고 개발하고 싶으면 주석처리해도 되겠지만 
	git stash 명령어를 이용해도 잠깐 코드를 치울 수 있습니다. 
	
	* git stash 사용해서 코드 잠깐 다른 곳에 보관하기
		aaaaaaaaaaaaa
	파일 하나 만들어서 이렇게 코드를 짜서 commit 해봅시다. 
		aaaaaaaaaaaaa
		bbbbbbbbbb
		그리고 밑에 bbbbb어쩌구 코드를 짜놨다고 칩시다.
		근데 밑에 코드가 마음에 안드는겁니다.
		이걸 잠깐 삭제해버리고 싶으면 git stash 명령어를 씁시다. 
		
	Q. 주석처리해놓는게 더 쉬울듯 
		실은 코드를 주석처리하는거랑 용도가 비슷하긴 한데 
		주석처리된 코드는 commit할 때 반영됩니다. 그렇게 되면 주석도 commit 기록에 남아서 기록이 더러워질 수 있습니다. 
		주석처리한 내용을 commit 해버리기 싫을 때 git stash 쓰면 유용합니다. 
		또는 기능 A, B를 만들어야하는데
		기능A는 완성되었고 기능B는 반쯤 완성된 경우 
		팀장이 "기능A 부분만 빨리 commit하고 merge 하라"고 하면
		그럴 때 기능B를  git stash 해놔도 좋을듯요 

	Q. 브랜치 새로 만들어서 거기다 코드짜놓는거랑 다를바 없는데요?
		들킴
		간단히 브랜치만들어서 거기 보관하는 것도 나쁘지않습니다. 