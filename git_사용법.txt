
https://codingapple.com/course/git-and-github/
코딩애플 사이트에 있는 git 사용법 요약(?)

[git 설치법 (윈도우 / 맥북)]-------------------------------------------------------------------------------------------------

	구글에 visual studio code 검색해서 설치합시다.
	* git --version 이라고 입력해봅시다. 
	버전이 아무거나 뜨면 git 설치성공입니다.
	안뜨면 에디터나 컴퓨터 재시작해봅시다. 

	[git 유저 이름셋팅]
	git config --global user.email "홍길동@naver.com"
	git config --global user.name "홍길동"
	컴퓨터에서 git을 처음 사용한다면 위 코드를 터미널에 차례로 입력하면 되는데 
	누가 지금 git을 쓰고있는지 구분하기 위한 간단한 아이디 등록같은겁니다.
	
[git add, commit으로 파일 기록해놓을 수 있음]-------------------------------------------------------------------------------------------------	
	
	일단 작업폴더에서 git을 이용하고 싶으면
	거기서 터미널을 열어서 * git init 부터 입력하고 시작하면 됩니다. 
	이제 git이 여러분이 파일생성하는거, 코드작성하는걸 추적하기 시작합니다. 
	
	* git add 파일명 
	* git commit -m '아무메세지'
	차례로 터미널에 입력하면 됩니다. 
	이러면 방금 파일의 내용을 몰래 어딘가에 기록해줍니다. 
	이럼 뭐가좋냐고요? 
	이제 한참 뒤에도 이 파일상태 그대로 되돌리거나 그럴 수 있고
	나중에 파일변경 히스토리가 궁금하면 열람할 수도 있습니다.

	[staging area & repository ]
	
	1. staging area는 commit을 하기 전에 commit할 파일들을 골라놓는 곳입니다.
		그리고 staging area에 파일넣는 행위를 staging이라고 합니다. 
		git add 명령어로 staging 할 수 있습니다. 

	2. repository는 commit된 파일의 버전들을 모아놓는 곳입니다.
		repository의 실체를 구경하고 싶으면 작업폴더안에 숨겨져 있는 .git 폴더 열어보면 됩니다. 
		아무튼 staging area & repository 2개는 자주 쓰는 용어니까 잘 외워둡시다.
		
	작업폴더의 모든 파일을 전부 스테이징하고 싶으면 * git add . 하면 됩니다.
	
	* git status
	지금 변경된 파일, 스테이징된 파일 이런걸 쭉 알려줍니다. 
	지금 뭐 하는지 까먹었을 때도 자주 입력하게 됩니다. 
	
	* git log --all --oneline
	* git log --all --oneline --graph
	commit 기록을 한 눈에 파악하고 싶으면 git log 명령어 입력하면 됩니다. 
	--graph 옵션을 넣으면 그래프로 그려줍니다. 지금은 보잘것 없음 
	다만 입력 후엔 Vim 에디터가 켜져서 j, k 키로 위아래 스크롤이 가능하고 q 키로 종료할 수 있습니다. 

[git 에서 branch 만들기](=복사본 만들어서 테스트)-------------------------------------------------------------------------------------------------
	
	* git branch 브랜치이름 
	이러면 프로젝트 사본이 하나 생성됩니다.
	
	* git switch 브랜치이름 
	예를 들어 방금 만든 coupon 브랜치로 이동하고 싶으면 git switch coupon 하면 됩니다.
	- 어떤 브랜치에 와있는지 까먹었으면 git status 입력할 수 있습니다. 
	
	* git switch main
	* git merge 브랜치명 
	
		merge 하고 싶으면
		1. main/master 브랜치로 다시 이동하고
		2. git merge 브랜치명 입력하면 합쳐집니다.
		예를 들어 git merge coupon 이러면 coupon 브랜치의 코드들이 main/master 브랜치에 합쳐집니다.
	
	* conflict	
		master 브랜치와 coupon 브랜치에서 같은 파일, 같은 줄을 수정했을 경우
		merge conflict 가 발생합니다.
		
		 둘 중 어떤 코드를 적용할지 고르면 되는데 
		<<<< / >>>> / ==== 이런 쓸데없는 것들은 다 지우고 원하는 코드만 남기면 됩니다.
		(VSCode 에디터의 경우 Accept Incoming Change 어쩌구 버튼들을 제공해주는데 그거 누르면 편리합니다)
		어떤 코드를 남길지 결정했으면 
		git add 파일명
		git commit -m '메세지'
		입력하면 새로운 commit 을 생성해주며 merge conflict 해결 + 브랜치 합치기 완료입니다. 
		
	* 오늘 요약정리 : 

		브랜치 생성은 git branch 브랜치명
		브랜치 이동은 git switch 브랜치명 
		브랜치 합치기는 main/master 브랜치로 이동한 뒤에 git merge 브랜치명
		브랜치마다 commit 내역을 그래프로 보고싶으면 git log --graph --oneline --all
		브랜치 합칠 때 conflict가 발생하면 파일열어서 수정하고 git add, git commit 하기 


[다양한 merge 방법 (3-way, fast-forward, squash, rebase)]-------------------------------------------------------------------------------------------------

	* 3-way merge  
		브랜치에 각각 신규 commit이 1회 이상 있는 경우 
		merge 명령을 내리면 두 브랜치의 코드를 합쳐서 새로운 commit을 자동으로 생성해주는데
		이걸 3-way merge 라고 부릅니다.
		이게 merge의 기본 동작방식입니다. 

	* fast-forward merge
		가끔은 새로운 브랜치에만 commit 이 있고 기준이 되는 브랜치에는 신규 commit 이 없는 경우가 있습니다.
		이 경우 merge 하게 되면 "fast-forward merge 되었습니다" 라고 알려줍니다.
		fast-forward merge가 뭐냐면 
		딱히 합칠게 없어서 그냥 신규브랜치 보고
		"지금부터 니 이름은 main 브랜치여" 하는 것입니다. 
		
	(브랜치를 삭제하려면)
		3-way,  fast-forward 아무렇게나 merge 해도
		브랜치를 merge 하고 나면 브랜치가 자동으로 삭제되진 않습니다. 

		* git branch -d 브랜치이름
		* git branch -D 브랜치이름
			둘 중 하나 사용하면 이제 필요없는 브랜치를 삭제할 수 있습니다. 
			병합이 완료된 브랜치 삭제시엔 -d 이것만 해도 되는데
			병합하지 않은 브랜치 삭제시엔 -D 이거 해야함 	
			
	* rebase and merge 

		브랜치를 rebase 하고 나서 merge 하는 짓거리도 가능합니다. 
		일단 rebase가 뭐냐면 	
		rebase는 브랜치의 시작점을 다른 commit으로 옮겨주는 행위입니다. 

		1. rebase를 이용해서 신규브랜치의 시작점을 main 브랜치 최근 commit으로 옮긴 다음 
		2. fast-forward merge하는 것입니다. 

		이런 식으로도 브랜치 합치기가 가능하겠군요. 
		왜 이따구로 하냐고요?

		1. 3-way merge 말고 강제로 fast-forward 하고 싶을 때 
		2. 브랜치 그딴거 필요없이도 코드 잘짜는 고수같은 느낌을 주고 싶을 때
		그러고 싶으면 일반 3-way merge 대신 rebase & merge 해도 됩니다.

		그래서 실제로 rebase and merge 하고 싶으면 
		1. 새로운 브랜치로 먼저 이동해서
		2. git rebase main 하면 됩니다. 
		3. 그럼 브랜치가 main 브랜치 끝으로 이동하는데 그걸 fast-forward merge 하면 됩니다. 

		* git switch 새로운브랜치
		* git rebase main

		* git switch main
		* git merge 새로운브랜치
		차례로 입력하면 rebase 끝입니다. 

		rebase & merge를 한 줄로 쉽게 비유하자면 강제 fast-forward merge입니다. 

	* squash and merge 하는 경우도 있음
		왜냐면 
		(1) 3-way merge 된 것들은 매우 복잡해보임 
		(2) main 브랜치 git log 출력해보면 3-way merge된 브랜치들의 commit 내역도 다 같이 출력되어서 더러워짐 
		이런 현상이 있습니다.  

		그러기 싫으면 rebase 아니면 squash and merge 하면 됩니다. 
		그거 쓰면 새로운 브랜치에 있던 commit 들을 연결해주는게 아니라 똑 떼와서 main 브랜치에 붙여주기 때문에
		1번과 2번걱정을 안해도 됩니다. 

		rebase는 아까 배웠고
		squash and merge 이거 하면 어떻게 되냐면
		3-way merge처럼 선으로 이어주지 않고
		새 브랜치에 있던 코드변경사항들이 main 브랜치로 텔레포트합니다. 
		
	* 어떻게 merge 할 지 판단하기 힘들어요
		초보땐 squash 할지 말지 고민하지 말고 대충하십시오.
		나중에 코딩노예로 취직하면 중요한 브랜치마다 merge 방법 가이드라인이 있습니다. 

[코드짜다가 실수했다 되돌아가자 (git revert, reset, restore)]-------------------------------------------------------------------------------------------------

    git은 버전관리 프로그램이기때문에 언제든지 이전 commit으로 되돌아가거나
    문제가 되는 commit 내역을 취소하거나 그럴 수 있습니다.

    git restore / git revert / git reset 명령어 써서 파일 복구하는 법을 알아봅시다. 
    각각 파일하나 복구, commit 복구, 시간되돌리기가 가능합니다. 

    [파일 하나를 되돌리려면 git restore]

        git restore 파일명
        이러면 최근 commit 된 상태로 현재 파일의 수정내역을 되돌릴 수 있습니다.  

     *  git restore --source 커밋아이디 파일명
        (git restore --source d03ee04 .\git_revert.java)
        이러면 입력한 파일이 특정 커밋아이디 시점으로 복구됩니다.  

        git restore --staged 파일명
        이건 복구랑 상관없지만 이러면 특정 파일을 staging 취소할 수 있습니다. 
		
[Github 사용법 1. 내 코드 올릴 땐 git push]-----------------------------------------------------------------------------------------------------------------

	git push, pull 어쩌구 배우기 전에
	원격 repository 개념과 왜 사용하는지부터 알고 지나갑시다. 
	그래야 자신있게 git push 이런거 사용가능 	
	

	* github 가입하고 repository (저장소) 하나 만들기
	* 일단 작업폴더에서 git으로 commit 몇번 해보셈
		원격저장소 왜 쓴다고 했습니까.
		내 컴퓨터에서 만들어둔 저장소를 백업해둘 수 있다고 해서 쓴다고 하지 않았습니까.
		그래서 내 컴퓨터에서 만든 로컬저장소를 원격저장소로 백업해봅시다.
		일단 새로운 작업폴더에다가 git init 해서 저장소 하나 만들어보십시오. 

		1. 작업폴더를 하나 만든 다음 터미널에서 열어서 git init 합니다.
		그게 로컬 리포지토리 생성 법임  

		2. github.com은 이제 기본 브랜치 이름을 master가 아니라 main으로 사용하라고 강요합니다.
		그래서 우리 로컬 작업폴더에 있는 기본 브랜치 이름도 main으로 변경해줍니다.
		터미널 열어서
		git branch -M main
		입력하면 기본 브랜치 이름이 변경됩니다. 
		안해도 될 수 있음 

		3. 그 다음에 파일같은거 만들어서 commit 몇 번 해보십시오. 
		
	** Github에서 만든 원격 저장소에 올리기
		로컬저장소 -> 원격저장소
		이렇게 업로드하고 싶으면 작업폴더에서 
		* git push -u 원격저장소주소 main
		하면 됩니다.
		- 로컬저장소의 main 브랜치를 원격저장소에 올리라는 뜻입니다. 다른 브랜치도 올릴 수 있음 
		- github 로그인하라고 뜨면 로그인하면 됩니다. 
		- 참고로 -u 옵션은 방금 입력한 주소 기억해두라는 뜻입니다. 다음부터는 주소를 길게 입력안하고 git push만 입력해도 잘됩니다.  
		원격 repository 주소는 이렇게 https:// 부터 시작해서 .git으로 끝납니다.
		잘 찾아보십시오.
		
		(참고)
		github 사이트에서도 파일 수정삭제, commit 이런 것들 자유롭게 가능합니다. 
		github 원격저장소는 비공개로 돌릴 수도 있음 
	
	*원격저장소주소 길게 입력하는게 귀찮으면 
		그니까 https://github.com/codingapple1/lesson.git 이거 매번 입력하기 귀찮으면 어떻게 하냐는 겁니다. 
		그럴 땐 그 주소를 변수에 저장해서 사용할 수 있습니다. 
		변수에 저장하려면 
		터미널에 git remote add 변수명 저장소주소
		입력하면 됩니다. 
		git remote add origin https://github.com/codingapple1/lesson.git
		이렇게 입력하면 "https://어쩌구" 주소가 필요할 때 마다 origin 이라는 변수명을 쓸 수 있습니다. 
		아까쓰던 지랄맞게 길던 명령어를 git push -u origin main 이렇게 짧고 귀엽게 쓸 수 있겠군요. 

		(참고) 실은 -u는 방금 입력한 주소를 기억하라는 뜻이라
		-u 붙여서 1번 했었으면 나중엔 git push 까지만 입력해도 알아서 잘됩니다. 
		진짜로 git push만 해보셈  

		(참고) 변수목록을 살펴보고 싶으면 git remote -v 입력해보십쇼 
		
	** 원격저장소에 있던거 그대로 내려받기
		돈벌어서 맥북을 샀는데 그 컴퓨터에서 갑자기 개발을 시작하고 싶은겁니다.
		그럼 귀찮게 컴퓨터간 소스코드를 공유할 필요 없이 
		원격저장소에 있던 내용을 그대로 내려받아서 시작하면 편리합니다. 
		* git clone https://원격저장소주소
		하십쇼 
		
	* 저장소에 올리지 않는 파일들은 .gitignore
		원격저장소를 효율적으로 쓰고 싶으면 쓸데없는 파일은 commit 해서 올리지 않는게 좋습니다.
		.gitignore 파일을 하나 만들면 저장소에 올리지 않을 파일들을 쉽게 명시가능합니다.
		거기 명시한 파일들은 git add . 해도 스테이징이 되지 않아서 편리합니다.
		웹개발을 제일 많이 하니까 웹개발을 예로 들면 
		node_modules 이런 폴더, 개인정보들이 들어있는 .env 파일 이런 것들은 안올립니다. 
		(어짜피 package.json 파일만 잘 있으면 터미널에서 npm install 입력하면 자동으로 node_modules 폴더가 생성됩니다.)
		그래서 .gitignore 파일에 명시해주면 됩니다.
		작성하는 법은 필요할 때 구글찾아보십쇼 

[Github 사용법 2. 타인과 협업하기 (git clone, pull)]-----------------------------------------------------------------------------------------------------------------	

	"기존 소스코드가 없는데 코드어떻게 짬?" 
	당연히 코딩노예는 기존 소스코드를 다운받아서 시작할 수 있습니다.  
	다운받는 법은 github.com 가서 다운받아도 되고 

	* git clone 원격저장소주소
	새로운 작업폴더에서 이거 입력해도 됩니다. 
	그럼 원격저장소에 있던 내용을 그대로 복제해줍니다. 
	새로 폴더만들어서 진짜 그런지 테스트해봅시다. 

	 git clone 했더니 진짜로 저번 시간에 만들었던 리포지토리가 다운받아집니다. 
	참고로 필요할 땐 특정 브랜치 1개만 clone 해올 수 있습니다. 필요하면 찾아봅시다. 
	이제 팀원도 폴더 열어서 코드짜고 commit 하고 git push 하면 됩니다. 
	
	다만 그 팀원도 github 아이디가 있어야하고
	그 팀원의 아이디를 Collaborators 메뉴에 등록해놔야 협업가능합니다. 
	
	* 팀원이 commit 하려는데 문제가 생김 
		git push는 맘대로 할 수 있는게 아닙니다.
		갑자기 다른 놈이 만든 파일이 원격저장소에 생기면 git push 못합니다. 
		예를 들어 github.com 의 여러분 리포지토리로 들아가봅시다. 
		거기서 새로운 파일 하나를 만들어봅시다. 
		
	* git pull 이용하면 현재 원격저장소 내용 가져올 수 있음  
	* git pull 원격저장소주소
	이러면 원격저장소에 있던 모든 브랜치 내용을 가져와서 로컬저장소에 합치라는 뜻입니다.
	이걸 해주면 로컬이 최신상태가 되기 때문에 이제 git push가 가능합니다.

	** 결론은 변동사항이 생겼다면 git pull 하고 나서 git push 하면 됩니다.

	(참고)
		- git pull 원격저장소주소 브랜치명 입력하면 특정 브랜치만 가져올 수 있습니다. 
		- origin이라는 변수명을 등록해놨으면 당연히 사용가능
		- 예전에 -u 했었으면 git pull, git push까지만 입력해도 잘됩니다.

	(참고) git pull 명령어는 git fetch + git merge 축약어임 

		git pull 입력하면 자동으로 git fetch + git merge를 해줍니다. 
		git fetch는 원격저장소에 있는 commit 중에 로컬에 없는 신규 commit을 가져오라는 뜻이고
		git merge는 그걸 merge 하라는 뜻입니다. 
		그래서 git pull 할 때 팀원 2명이서 같은 파일을 건드리고 있을 경우 merge conflict가 날 수 있습니다.
		conflict는 branch 다룰 때 다뤄봤으니 알아서 해결하면 됩니다. 

	그래서 오늘의 결론은
	* 협업시 git push 하기 전에 뭐라그러면 git pull 존나게 하면 됩니다. 
	
[Github 사용법 3. 브랜치로 협업하기 (pull request)]-----------------------------------------------------------------------------------------------------------------		

	신기능을 만들고 싶으면 main 브랜치에 코드짜다가 프로젝트 망치지말고
	다른 브랜치를 만들어서 거기에 개발하는 것도 안전하고 좋다고 했습니다.
	
	